数据双向绑定：
	DOM元素>data
	data>DOM元素
	

DOM元素>data的数据绑定
	目的：操作可输入数据的DOM元素【input type="text“，textarea,select】，导致对应的data的数据变化
	实现原理：元素的change事件，给事件同意添加预处理事件，获取修改的内容，然后同步到data中去

data>DOM元素的数据绑定
	目的：修改data的时候，和data相关联的DOM元素也对应更改
	实现方法：(多种实现)
		1.脏值检查（setTimeout检测数据变化,在angular的框架中用到）
		2.数据劫持：例如vue使用的Object.defineProperty()
	实现思路【数据劫持】：
		1.DOM元素的属性和data如何映射绑定（需要一个映射绑定的方法）：观察者模式
			观察者模式：
				观察者：template片段，更直接地说就是有v-bind属性的节点（每个节点有对应的callback，其实就是重新render）
				被观察者：data数据（被观察者中包含一个订阅数组，里面放了所有的观察者的订阅）

			具体执行流程：
				1.观察者订阅被观察者的某个key（订阅的时候观察者传入自己的回调函数）【有v-bind属性的节点为观察者，观察的key就是v-bind属性中的变量】
				2.被观察者里面的key的值变化的时候【也就是属性的set函数执行的时候】，在被观察者的订阅数组里面，遍历寻找哪几个观察者订阅了这个key，然后执行订阅这个key的观察者所传过来的回调函数

			优化：
				一次操作只改变一个key（不管改变的是string这种简单类型还是object复杂类型），修改后就直接执行对应的callback
				但是，很多情况下，比如说for循环，改变了许多key，因为for循环的js执行很快，而且其实改变的都是同一个父节点下的key，每个key改变就执行回调是很浪费的事情
				可以在set的时候【或者是在中间层内】，设置一个setTimeout，等js执行完，给所有的key寻找一个统一的父节点，然后再渲染